terraform {
  required_providers {
    azurerm = {
      source  = "azurerm"
      version = "4.24.0"
    }
  }
}

provider "azurerm" {
  features {}
  use_cli         = true
  subscription_id = "3cb5b17b-f702-4534-bf9d-f5e83dd19e4c"
}

# Create a resource group
resource "azurerm_resource_group" "RaghuSolArch" {
  name     = "RaghuSolArch"
  location = "France Central"
}

resource "azurerm_virtual_network" "vnet" {
  name                = "myVnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name
}

resource "azurerm_subnet" "subnet" {
  name                 = "mySubnet"
  resource_group_name  = azurerm_resource_group.RaghuSolArch.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_network_security_group" "nsg" {
  name                = "vm-nsg"
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name

  security_rule {
    name                       = "allow_lb_probe"
    priority                   = 1000
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = "AzureLoadBalancer"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "allow_ssh"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "allow_http"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "HTTPS"
    priority                   = 1003
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

}

resource "azurerm_network_interface" "nic" {
  for_each            = local.vm_data
  name                = "nic-${each.value.name}"
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name

  ip_configuration {
    name                          = "ipconfig-${each.value.name}"
    subnet_id                     = azurerm_subnet.subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.vm_pip[each.key].id
  }
}

resource "azurerm_network_interface_security_group_association" "nsg_assoc" {
  for_each                  = azurerm_network_interface.nic
  network_interface_id      = azurerm_network_interface.nic[each.key].id
  network_security_group_id = azurerm_network_security_group.nsg.id
}

resource "azurerm_network_interface_backend_address_pool_association" "bepool_assoc" {
  for_each                = azurerm_network_interface.nic
  network_interface_id    = azurerm_network_interface.nic[each.key].id
  ip_configuration_name   = "ipconfig-${local.vm_data[each.key].name}"
  backend_address_pool_id = azurerm_lb_backend_address_pool.bpepool.id
}
resource "azurerm_public_ip" "vm_pip" {
  for_each            = local.vm_data
  name                = "pip-${each.value.name}"
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name
  allocation_method   = "Static"
  sku                 = "Standard"
}

locals {
  vm_data = {
    server1 = {
      name = "vm1"
      custom_data = base64encode(<<EOF
#!/bin/bash
apt update
apt install apache2 -y
systemctl restart apache2
echo "server1" > /var/www/html/index.html
EOF
      )
    }
    server2 = {
      name = "vm2"
      custom_data = base64encode(<<EOF
#!/bin/bash
apt update 
apt install apache2 -y
systemctl restart apache2
echo "server2" > /var/www/html/index.html
EOF
      )
    }
  }
}


resource "azurerm_linux_virtual_machine" "vm" {
  for_each                        = local.vm_data
  name                            = each.value.name
  location                        = azurerm_resource_group.RaghuSolArch.location
  resource_group_name             = azurerm_resource_group.RaghuSolArch.name
  network_interface_ids           = [azurerm_network_interface.nic[each.key].id]
  size                            = "Standard_B1s"
  admin_username                  = "learning"
  admin_password                  = "Redhat@12345"
  disable_password_authentication = false

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
    name                 = "osdisk-${each.value.name}"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts"
    version   = "latest"
  }

  custom_data = each.value.custom_data
}

resource "azurerm_public_ip" "lb_public_ip" {
  name                = "myapppublicip"
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name
  allocation_method   = "Static"
  sku                 = "Standard"
  sku_tier            = "Regional"
}

resource "azurerm_lb" "lb" {
  name                = "loadbalancer1"
  location            = azurerm_resource_group.RaghuSolArch.location
  resource_group_name = azurerm_resource_group.RaghuSolArch.name
  sku                 = "Standard"
  sku_tier            = "Regional"

  frontend_ip_configuration {
    name                 = "myfrontendip"
    public_ip_address_id = azurerm_public_ip.lb_public_ip.id
  }
}

resource "azurerm_lb_backend_address_pool" "bpepool" {
  name            = "myappservers"
  loadbalancer_id = azurerm_lb.lb.id
}

resource "azurerm_lb_probe" "probe" {
  name                = "myapphealthcheck"
  loadbalancer_id     = azurerm_lb.lb.id
  protocol            = "Http"
  port                = 80
  request_path        = "/"
  interval_in_seconds = 5
  number_of_probes    = 1
  probe_threshold     = 1
}

resource "azurerm_lb_rule" "lbrule" {
  name                           = "myapplbrule"
  loadbalancer_id                = azurerm_lb.lb.id
  protocol                       = "Tcp"
  frontend_port                  = 80
  backend_port                   = 80
  frontend_ip_configuration_name = "myfrontendip"
  backend_address_pool_ids       = [azurerm_lb_backend_address_pool.bpepool.id]
  probe_id                       = azurerm_lb_probe.probe.id
  disable_outbound_snat          = true
  enable_floating_ip             = false
  enable_tcp_reset               = false
  idle_timeout_in_minutes        = 4
  load_distribution              = "Default"
}


output "load_balancer_public_ip" {
  value       = azurerm_public_ip.lb_public_ip.ip_address
  description = "Public IP address of the Load Balancer"
}

output "vm_public_ips" {
  value = [for pip in azurerm_public_ip.vm_pip : pip.ip_address]
}
