variable "subscription_id" {
  description = "Azure Subscription ID"
  type        = string
  default     = "3cb5b17b-f702-4534-bf9d-f5e83dd19e4c"
}

variable "location" {
  description = "Azure Region"
  type        = string
  default     = "France Central"
}

variable "resource_group_name" {
  description = "Resource Group Name"
  type        = string
  default     = "learning"
}

variable "virtual_network_name" {
  description = "Virtual Network Name"
  type        = string
  default     = "k8s_vnet"
}

variable "vnet_address_space" {
  description = "Virtual Network address space"
  type        = list(string)
  default     = ["10.0.0.0/16"]
}

variable "subnet_name" {
  description = "Subnet Name"
  type        = string
  default     = "k8s_subnet"
}

variable "subnet_prefix" {
  description = "Subnet address prefix"
  type        = list(string)
  default     = ["10.0.1.0/24"]
}

variable "nsg_name" {
  description = "Network Security Group Name"
  type        = string
  default     = "k8s_nsg"
}

variable "nic_name" {
  description = "NIC Name Prefix"
  type        = string
  default     = "k8s_nic"
}

variable "public_ip_name" {
  description = "Public IP Name Prefix"
  type        = string
  default     = "k8s_public_ip"
}

variable "vm_names" {
  description = "List of VM Names"
  type        = list(string)
  default     = ["master", "node1", "node2"]
}

variable "vm_size" {
  description = "VM Size"
  type        = string
  default     = "Standard_B2s"
}

variable "admin_username" {
  description = "Admin Username"
  type        = string
  default     = "learning"
}

variable "admin_password" {
  description = "Admin Password"
  type        = string
  sensitive   = true
  default     = "Redhat@12345"
}

variable "disk_size" {
  description = "OS Disk Size (GB)"
  type        = number
  default     = 30
}

provider "azurerm" {
  features {}
  use_cli         = true
  subscription_id = var.subscription_id
}

resource "azurerm_resource_group" "k8s-resource-group" {
  name     = var.resource_group_name
  location = var.location
}
resource "azurerm_virtual_network" "k8s-virtual-network" {
  name                = var.virtual_network_name
  address_space       = var.vnet_address_space
  location            = azurerm_resource_group.k8s-resource-group.location
  resource_group_name = azurerm_resource_group.k8s-resource-group.name
}

resource "azurerm_subnet" "k8s-subnet" {
  name                 = var.subnet_name
  resource_group_name  = azurerm_resource_group.k8s-resource-group.name
  virtual_network_name = azurerm_virtual_network.k8s-virtual-network.name
  address_prefixes     = var.subnet_prefix
}

resource "azurerm_network_security_group" "k8s_ntw_security_group" {
  name                = var.nsg_name
  location            = azurerm_resource_group.k8s-resource-group.location
  resource_group_name = azurerm_resource_group.k8s-resource-group.name

  security_rule {
    name                       = "SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTPS"
    priority                   = 1003
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_subnet_network_security_group_association" "k8s-ntw-sec-group_assoc" {
  subnet_id                 = azurerm_subnet.k8s-subnet.id
  network_security_group_id = azurerm_network_security_group.k8s_ntw_security_group.id
}

resource "azurerm_network_interface" "k8s-nic" {
  for_each            = toset(var.vm_names)
  name                = "${var.nic_name}_${each.key}"
  location            = azurerm_resource_group.k8s-resource-group.location
  resource_group_name = azurerm_resource_group.k8s-resource-group.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.k8s-subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.k8s_public_ip[each.key].id
  }
}

resource "azurerm_public_ip" "k8s_public_ip" {
  for_each            = toset(var.vm_names)
  name                = "${var.public_ip_name}_${each.key}"
  location            = azurerm_resource_group.k8s-resource-group.location
  resource_group_name = azurerm_resource_group.k8s-resource-group.name
  allocation_method   = "Static"
}

resource "azurerm_linux_virtual_machine" "k8s-ubuntu-vm" {
  for_each              = toset(var.vm_names)
  name                  = each.key
  resource_group_name   = azurerm_resource_group.k8s-resource-group.name
  location              = azurerm_resource_group.k8s-resource-group.location
  size                  = var.vm_size
  admin_username        = var.admin_username
  network_interface_ids = [azurerm_network_interface.k8s-nic[each.key].id]

  disable_password_authentication = false
  admin_password                  = var.admin_password

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb         = var.disk_size
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "ubuntu-24_04-lts"
    sku       = "server"
    version   = "latest"
  }
  # source_image_reference {
  #   publisher = "Canonical"
  #   offer     = "0001-com-ubuntu-server-jammy"
  #   sku       = "22_04-lts"
  #   version   = "latest"
  # }

  custom_data = base64encode(file("${path.module}/init.sh"))

}


#init.sh

#!/bin/bash

swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
sudo sysctl --system
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install containerd.io docker-ce docker-ce-cli docker-buildx-plugin docker-compose-plugin -y
mkdir -p /etc/containerd
containerd config default | tee /etc/containerd/config.toml
sed -e 's/SystemdCgroup = false/SystemdCgroup = true/g' -i /etc/containerd/config.toml
systemctl restart containerd
systemctl enable containerd
echo "init.sh completed on $(hostname) at $(date)" | sudo tee /var/log/init-script-status.log
echo "INIT SCRIPT FINISHED SUCCESSFULLY on $(hostname) at $(date)"
