provider "azurerm" {
  features {}
  use_cli = true
  subscription_id = "3cb5b17b-f702-4534-bf9d-f5e83dd19e4c"
}

# Create a resource group
resource "azurerm_resource_group" "docker-rg" {
  name     = "docker-rg"
  location = "France Central"
}

# Create a virtual network
resource "azurerm_virtual_network" "docker-vnet" {
  name                = "docker-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.docker-rg.location
  resource_group_name = azurerm_resource_group.docker-rg.name
}


resource "azurerm_subnet" "docker-subnet" {
  name                 = "docker-subnet"
  resource_group_name  = azurerm_resource_group.docker-rg.name
  virtual_network_name = azurerm_virtual_network.docker-vnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

# Associate NSG to subnet

resource "azurerm_subnet_network_security_group_association" "docker-ntw-sec-group_assoc" {
  subnet_id                 = azurerm_subnet.docker-subnet.id
  network_security_group_id = azurerm_network_security_group.docker-ntw-security-group.id
}

resource "azurerm_network_security_group" "docker-ntw-security-group" {
  name                = "docker-ntw-security-group"
  location            = azurerm_resource_group.docker-rg.location
  resource_group_name = azurerm_resource_group.docker-rg.name

  security_rule {
    name                       = "SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 1002
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTPS"
    priority                   = 1003
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_network_interface" "docker-nic" {
  name                = "docker-nic"
  location            = azurerm_resource_group.docker-rg.location
  resource_group_name = azurerm_resource_group.docker-rg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.docker-subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.docker_public_ip.id
  }
}


resource "azurerm_public_ip" "docker_public_ip" {
  name                = "docker_public_ip"
  location            = azurerm_resource_group.docker-rg.location
  resource_group_name = azurerm_resource_group.docker-rg.name
  allocation_method   = "Static"
}

resource "azurerm_linux_virtual_machine" "docker" {
  name                  = "docker"
  resource_group_name   = azurerm_resource_group.docker-rg.name
  location              = azurerm_resource_group.docker-rg.location
  size                  = "Standard_B1s"
  admin_username        = "learning"
  network_interface_ids = [azurerm_network_interface.docker-nic.id]

  disable_password_authentication = false
  admin_password                  = "Redhat@12345"

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb         = 30
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts"
    version   = "latest"
  }


  custom_data = base64encode(<<EOF
#!/bin/bash
sudo apt-get update
sudo apt-get -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
sudo apt-get update
sudo apt-get -y install docker-ce docker-ce-cli containerd.io
sudo systemctl start docker
sudo systemctl enable docker
sudo gpasswd -a learning docker
echo "DOCKER INSTALLATION COMPLETE" | tee /var/log/docker_install_status.log
sudo reboot
EOF
  )
}


output "public_ip" {
  value = azurerm_public_ip.docker_public_ip.ip_address
}

