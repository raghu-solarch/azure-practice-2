variable "use_cli_auth" {
  description = "Set to true to authenticate to Azure using the Azure CLI. False will require environment variables or service principal."
  type        = bool
  default     = true
}

variable "resource_group_name" {
  description = "Name of the Azure Resource Group."
  type        = string
  default     = "vnet-peering-rg"
}

# --- VNet1 Variables ---
variable "vnet1_name" {
  description = "Name of Virtual Network 1."
  type        = string
  default     = "vnet1"
}

variable "vnet1_location" {
  description = "Azure region for Virtual Network 1 and Server 1."
  type        = string
  default     = "France Central"
}

variable "vnet1_address_space" {
  description = "Address space for Virtual Network 1 (CIDR)."
  type        = string
  default     = "10.1.0.0/16"
}

variable "vnet1_subnet_name" {
  description = "Name of the subnet for VNet1."
  type        = string
  default     = "default"
}

variable "vnet1_subnet_address_prefix" {
  description = "Address prefix for the subnet in VNet1 (CIDR)."
  type        = string
  default     = "10.1.1.0/24"
}


variable "vnet2_name" {
  description = "Name of Virtual Network 2."
  type        = string
  default     = "vnet2"
}

variable "vnet2_location" {
  description = "Azure region for Virtual Network 2 and Server 2."
  type        = string
  default     = "East US"
}

variable "vnet2_address_space" {
  description = "Address space for Virtual Network 2 (CIDR)."
  type        = string
  default     = "20.1.0.0/16"
}

variable "vnet2_subnet_name" {
  description = "Name of the subnet for VNet2."
  type        = string
  default     = "default"
}

variable "vnet2_subnet_address_prefix" {
  description = "Address prefix for the subnet in VNet2 (CIDR)."
  type        = string
  default     = "20.1.1.0/24"
}


variable "vm_size" {
  description = "Size of the virtual machines."
  type        = string
  default     = "Standard_B1s"
}

variable "vm_admin_username" {
  description = "Admin username for the virtual machines."
  type        = string
  default     = "learning"
}

variable "vm_admin_password" {
  description = "Admin password for the virtual machines. Use a strong password!"
  type        = string
  sensitive   = true
  default     = "Redhat@12345"
}

variable "os_disk_type" {
  description = "Storage account type for the OS disk (e.g., Standard_LRS, Premium_LRS)."
  type        = string
  default     = "Standard_LRS"
}

variable "os_disk_size_gb" {
  description = "Size of the OS disk in GB."
  type        = number
  default     = 30
}

variable "vm_image_publisher" {
  description = "Publisher of the VM image."
  type        = string
  default     = "Canonical"
}

variable "vm_image_offer" {
  description = "Offer of the VM image."
  type        = string
  default     = "0001-com-ubuntu-server-jammy"
}

variable "vm_image_sku" {
  description = "SKU of the VM image. (e.g., 22_04-lts, 24_04-lts-gen2)"
  type        = string
  default     = "22_04-lts"
}

variable "vm_image_version" {
  description = "Version of the VM image."
  type        = string
  default     = "latest"
}


variable "server1_name" {
  description = "Name of Virtual Machine 1."
  type        = string
  default     = "server1"
}
variable "server1_nsg_name" {
  description = "Name of the Network Security Group for Server 1."
  type        = string
  default     = "nsg-server1"
}
variable "server1_public_ip_name" {
  description = "Name of the Public IP for Server 1."
  type        = string
  default     = "server1-public-ip"
}
variable "server1_nic_name" {
  description = "Name of the Network Interface for Server 1."
  type        = string
  default     = "server1-nic"
}

variable "server2_name" {
  description = "Name of Virtual Machine 2."
  type        = string
  default     = "server2"
}
variable "server2_nsg_name" {
  description = "Name of the Network Security Group for Server 2."
  type        = string
  default     = "nsg-server2"
}
variable "server2_public_ip_name" {
  description = "Name of the Public IP for Server 2."
  type        = string
  default     = "server2-public-ip"
}
variable "server2_nic_name" {
  description = "Name of the Network Interface for Server 2."
  type        = string
  default     = "server2-nic"
}


# Configure the Azure provider
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

provider "azurerm" {
  features {}
  use_cli         = var.use_cli_auth
  subscription_id = "3cb5b17b-f702-4534-bf9d-f5e83dd19e4c"
}

# --- Resource Group ---
resource "azurerm_resource_group" "rg" {
  name     = var.resource_group_name
  location = var.vnet1_location
}

# 1. Create a virtual network with name vnet1
resource "azurerm_virtual_network" "vnet1" {
  name                = var.vnet1_name
  location            = var.vnet1_location
  resource_group_name = azurerm_resource_group.rg.name
  address_space       = [var.vnet1_address_space]

  encryption {
    enforcement = "AllowUnencrypted"
  }
}

# Create a subnet for vnet1
resource "azurerm_subnet" "vnet1_subnet" {
  name                 = var.vnet1_subnet_name
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet1.name
  address_prefixes     = [var.vnet1_subnet_address_prefix]
}

# Create a Network Security Group for Server1
resource "azurerm_network_security_group" "nsg_server1" {
  name                = "nsg-server1"
  location            = var.vnet1_location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "SSH"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTPS"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

# Create a Public IP for Server1
resource "azurerm_public_ip" "server1_public_ip" {
  name                = var.server1_public_ip_name
  location            = var.vnet1_location
  resource_group_name = azurerm_resource_group.rg.name
  allocation_method   = "Static"
  sku                 = "Standard"
}

# Create a Network Interface for Server1
resource "azurerm_network_interface" "server1_nic" {
  name                = var.server1_nic_name
  location            = var.vnet1_location
  resource_group_name = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vnet1_subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.server1_public_ip.id
  }
}

# Associate NSG with Server1 NIC
resource "azurerm_network_interface_security_group_association" "server1_nsg_association" {
  network_interface_id      = azurerm_network_interface.server1_nic.id
  network_security_group_id = azurerm_network_security_group.nsg_server1.id
}

# 3. Create a virtual network with name vnet2
resource "azurerm_virtual_network" "vnet2" {
  name                = var.vnet2_name
  location            = var.vnet2_location
  resource_group_name = azurerm_resource_group.rg.name
  address_space       = [var.vnet2_address_space]

  encryption {
    enforcement = "AllowUnencrypted"
  }
}

# Create a subnet for vnet2
resource "azurerm_subnet" "vnet2_subnet" {
  name                 = var.vnet2_subnet_name
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet2.name
  address_prefixes     = [var.vnet2_subnet_address_prefix]
}

# Create a Network Security Group for Server2
resource "azurerm_network_security_group" "nsg_server2" {
  name                = "nsg-server2"
  location            = var.vnet2_location
  resource_group_name = azurerm_resource_group.rg.name

  security_rule {
    name                       = "SSH"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTP"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "HTTPS"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

# Create a Public IP for Server2
resource "azurerm_public_ip" "server2_public_ip" {
  name                = var.server2_public_ip_name
  location            = var.vnet2_location
  resource_group_name = azurerm_resource_group.rg.name
  allocation_method   = "Static"
  sku                 = "Standard"
}

# Create a Network Interface for Server2
resource "azurerm_network_interface" "server2_nic" {
  name                = var.server2_nic_name
  location            = var.vnet2_location
  resource_group_name = azurerm_resource_group.rg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.vnet2_subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.server2_public_ip.id
  }
}

# Associate NSG with Server2 NIC
resource "azurerm_network_interface_security_group_association" "server2_nsg_association" {
  network_interface_id      = azurerm_network_interface.server2_nic.id
  network_security_group_id = azurerm_network_security_group.nsg_server2.id
}

# 2. Create a virtual machine server1
resource "azurerm_linux_virtual_machine" "server1" {
  name                            = var.server1_name
  location                        = var.vnet1_location
  resource_group_name             = azurerm_resource_group.rg.name
  size                            = var.vm_size
  admin_username                  = var.vm_admin_username
  admin_password                  = var.vm_admin_password
  disable_password_authentication = false
  network_interface_ids           = [azurerm_network_interface.server1_nic.id]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = var.os_disk_type
    name                 = "${var.server1_name}-osdisk"
    disk_size_gb         = var.os_disk_size_gb
  }

  source_image_reference {
    publisher = var.vm_image_publisher
    offer     = var.vm_image_offer
    sku       = var.vm_image_sku
    version   = var.vm_image_version
  }
}


# 4. Create a virtual machine server2
resource "azurerm_linux_virtual_machine" "server2" {
  name                            = var.server2_name
  location                        = var.vnet2_location
  resource_group_name             = azurerm_resource_group.rg.name
  size                            = var.vm_size
  admin_username                  = var.vm_admin_username
  admin_password                  = var.vm_admin_password
  disable_password_authentication = false
  network_interface_ids           = [azurerm_network_interface.server2_nic.id]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = var.os_disk_type
    name                 = "${var.server2_name}-osdisk"
    disk_size_gb         = var.os_disk_size_gb
  }

  source_image_reference {
    publisher = var.vm_image_publisher
    offer     = var.vm_image_offer
    sku       = var.vm_image_sku
    version   = var.vm_image_version
  }
}


# 5. Add peering on virtual network vnet1 to vnet2
resource "azurerm_virtual_network_peering" "vnet1_to_vnet2_peering" {
  name                         = "${var.vnet1_name}-to-${var.vnet2_name}-peering"
  resource_group_name          = azurerm_resource_group.rg.name
  virtual_network_name         = azurerm_virtual_network.vnet1.name
  remote_virtual_network_id    = azurerm_virtual_network.vnet2.id
  allow_virtual_network_access = true
  allow_forwarded_traffic      = true
  allow_gateway_transit        = false
  use_remote_gateways          = false
}

# Peering from vnet2 to vnet1 (the reciprocal peering)
resource "azurerm_virtual_network_peering" "vnet2_to_vnet1_peering" {
  name                         = "vnet2-to-vnet1-peering"
  resource_group_name          = azurerm_resource_group.rg.name
  virtual_network_name         = azurerm_virtual_network.vnet2.name
  remote_virtual_network_id    = azurerm_virtual_network.vnet1.id
  allow_virtual_network_access = true
  allow_forwarded_traffic      = true
  allow_gateway_transit        = false
  use_remote_gateways          = false
}


output "server1_public_ip" {
  description = "The public IP address of server1."
  value       = azurerm_public_ip.server1_public_ip.ip_address
}

output "server2_public_ip" {
  description = "The public IP address of server2."
  value       = azurerm_public_ip.server2_public_ip.ip_address
}


